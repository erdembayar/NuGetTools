@model SelectedVersionOutput<GetNearestFrameworkOutput>
@{
    ViewData["Title"] = "Get Nearest Framework";
var output = Model.Output;
}

<h1>Get Nearest Framework</h1>
<p>
    The get nearest framework operation is what NuGet uses to select one framework from many available framework assets in a package based on the project's framework. Enter one project framework and one or more package frameworks.
</p>

<form method="GET" action="">
    <div class="form-group">
        <label for="project">Project Framework</label>
        <input type="text" class="form-control framework-short-folder-name-typeahead monospace" name="project" id="project"
               autocomplete="off" placeholder="net45" value="@output.Input?.Project">
    </div>
    <div class="form-group">
        <label for="package">Package Frameworks</label>
        <textarea class="form-control framework-short-folder-name-typeahead monospace" rows="5" name="package" id="package"
                  placeholder="netstandard1.0">@output.Input?.Package</textarea>
    </div>
    <button type="submit" class="btn btn-default">Submit</button>
</form>

<div class="results">
    @if (@output.InputStatus == InputStatus.Valid)
{
    if (@output.Nearest != null)
    {
        <div class="alert alert-success" role="alert">
                The <code>@output.Nearest.Framework.ShortFolderName</code> (<b><parse-framework value="@output.Nearest.Input" /></b>)
                package framework is the nearest to the <code>@output.Project?.ShortFolderName</code>
                (<b><parse-framework value="@output.Input?.Project" /></b>) project framework.
            </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
                None of the recognized frameworks are compatible with the <code>@output.Project?.ShortFolderName</code>
                (<b><parse-framework value="@output.Input?.Project" /></b>) project framework.
            </div>
    }

    <div class="alert alert-info" role="alert">
            <p>The package frameworks that were considered were:</p>
            <ul class="list-unstyled">
                @foreach (var input in output.Package)
            {
                <li>
                        @if (input.IsCompatible)
                    {
                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                    }
                        <code>@input.Framework.ShortFolderName</code>
                        (<b><parse-framework value="@input.Input" /></b>)
                    </li>
            }
            </ul>
            @if (output.Invalid.Any())
        {
            <p>The following package framework(s) could not be parsed:</p>
            <ul>
                    @foreach (var invalid in output.Invalid)
                {
                    <li><b>@invalid</b></li>
                }
                </ul>
        }
        </div>
}
else if (@output.InputStatus == InputStatus.Invalid)
{
    if (!@output.IsProjectValid)
    {
        <div class="alert alert-danger" role="alert">
                Project framework <b>@output.Input?.Project</b> could not be parsed.
            </div>
    }

    if (!@output.IsPackageValid)
    {
        <div class="alert alert-danger" role="alert">
                <p>The following package framework(s) could not be parsed:</p>
                <ul>
                    @foreach (var invalid in output.Invalid)
                {
                    <li><b>@invalid</b></li>
                }
                </ul>
            </div>
    }
}
</div>
