@model SelectedVersionOutput<FindBestVersionMatchOutput>
@{
    ViewData["Title"] = "Find Best Version Match";
var output = Model.Output;
}

<h1>Find best version match</h1>
<p>
    The find best match operation is what NuGet uses to select one version of a package from many available versions based on a version specification (version range).
    Enter a version range and one or more versions.
</p>

<form method="GET" action="">
    <div class="form-group">
        <label for="versionRange">Version Range</label>
        <input type="text" class="form-control monospace" name="versionRange" id="versionRange"
               placeholder="[1.0.0, )" value="@output.Input?.VersionRange">
    </div>
    <div class="form-group">
        <label for="versions">Versions</label>
        <textarea class="form-control monospace" rows="5" name="versions" id="versions" placeholder="1.1.0">@output.Input?.Versions</textarea>
    </div>
    <button type="submit" class="btn btn-default">Submit</button>
</form>

<div class="results">
    @if (output.InputStatus == InputStatus.Valid)
{
    if (output.BestMatch != null)
    {
        <div class="alert alert-success" role="alert">
                The <code>@output.BestMatch.Version.GetPrettyString()</code> (<b><parse-version value="@output.BestMatch.Input" /></b>) version
                is the best match to the <code>@output.VersionRange?.NormalizedString</code> (<b><parse-version-range value="@output.Input?.VersionRange" /></b>) version range.
            </div>
    }
    else if (output.IsOperationSupported)
    {
        <div class="alert alert-warning" role="alert">
                None of the recognized versions satisfied the <code>@output.VersionRange?.NormalizedString</code> (<b><parse-version-range value="@output.Input?.VersionRange" /></b>) version range.
            </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
                Finding the best version match is only supported in NuGet 3.x and greater.
            </div>
    }

    <div class="alert alert-info" role="alert">
            @if (output.AreVersionsSorted)
        {
            <p>The following versions were considered, <b>displayed in the order of precedence</b>:</p>
        }
        else
        {
            <p>The following versions were considered, displayed in the order that they were provided:</p>
        }

            <ul class="list-unstyled">
                @foreach (var input in output.Versions)
            {
                <li>
                        @if (input.Satisfies)
                    {
                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                    }
                        <code>@input.Version.GetPrettyString()</code>
                        (<b><parse-version value="@input.Input" /></b>)
                    </li>
            }
            </ul>
            @if (output.Invalid.Any())
        {
            <p>The following version(s) could not be parsed:</p>
            <ul>
                    @foreach (var invalid in output.Invalid)
                {
                    <li><b>@invalid</b></li>
                }
                </ul>
        }
        </div>
}
else if (output.InputStatus == InputStatus.Invalid)
{
    if (!output.IsVersionRangeValid)
    {
        <div class="alert alert-danger" role="alert">
                Version range <b>@output.Input?.VersionRange</b> could not be parsed.
            </div>
    }

    if (!output.IsVersionValid)
    {
        <div class="alert alert-danger" role="alert">
                <p>The following version(s) could not be parsed:</p>
                <ul>
                    @foreach (var invalid in output.Invalid)
                {
                    <li><b>@invalid</b></li>
                }
                </ul>
            </div>
    }
}
</div>
